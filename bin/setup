#!/usr/bin/env ruby
require 'pathname'

# path to your application root.
APP_ROOT = Pathname.new File.expand_path('../../',  __FILE__)

Dir.chdir APP_ROOT do
  # This script is a starting point to setup your application.
  # Add necessary setup steps to this file:

  puts "== Installing dependencies =="
  system "gem install bundler --conservative"
  system "bundle check || bundle install"

  # Install JavaScript dependencies if using Yarn
  system('bin/yarn')

  # puts "\n== Copying sample files =="
  # unless File.exist?("config/database.yml")
  #   system "cp config/database.yml.sample config/database.yml"
  # end

  unless File.exist?('config/secrets.yml')
    puts "\n== Generating secret key =="
    secret = `bundle exec rails secret`

    File.open('config/secrets.yml', 'w') do |file|
      content = <<~HTML
        development:
          secret_key_base: #{secret}
        test:
          secret_key_base: #{secret}
        production:
          secret_key_base: <%= ENV["SECRET_KEY_BASE"] %>
      HTML
      file << content
    end
  end

  puts "\n== Preparing database =="
  if ENV['RAILS_ENV'] == 'test'
    # If the RAILS_ENV is already set to test (such as on the CI server) then
    # not only will rake db:setup generate the test database, but will also seed
    # it. This differs from the test database created when an environment is
    # unspecified, which is unseeded. We avoid using rake db:setup in this case
    # and just create the database and load the schema instead.
    system "bin/rake db:create db:schema:load"
  else
    system "bin/rake db:setup"
  end

  puts "\n== Removing old logs and tempfiles =="
  system "rm -f log/*"
  system "rm -rf tmp/cache"

  puts "\n== Restarting application server =="
  system "touch tmp/restart.txt"
end
